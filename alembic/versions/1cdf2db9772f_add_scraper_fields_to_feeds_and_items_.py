"""Add scraper fields to feeds and items tables

Revision ID: 1cdf2db9772f
Revises: 4d231da722a4
Create Date: 2025-10-05 18:07:18.453302

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1cdf2db9772f'
down_revision: Union[str, Sequence[str], None] = '4d231da722a4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_research_results_run_id'), table_name='research_results')
    op.drop_index(op.f('ix_research_results_type'), table_name='research_results')
    op.drop_table('research_results')
    op.drop_index(op.f('ix_research_article_links_item_id'), table_name='research_article_links')
    op.drop_table('research_article_links')
    op.drop_index(op.f('ix_research_queries_executed'), table_name='research_queries')
    op.drop_index(op.f('ix_research_queries_run_id'), table_name='research_queries')
    op.drop_table('research_queries')
    # Add scraper fields to feeds (nullable first, then set defaults, then make NOT NULL)
    op.add_column('feeds', sa.Column('scrape_full_content', sa.Boolean(), nullable=True))
    op.add_column('feeds', sa.Column('scrape_method', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    # Set default values for existing rows
    op.execute("UPDATE feeds SET scrape_full_content = FALSE WHERE scrape_full_content IS NULL")
    op.execute("UPDATE feeds SET scrape_method = 'auto' WHERE scrape_method IS NULL")
    # Now make them NOT NULL
    op.alter_column('feeds', 'scrape_full_content', nullable=False)
    op.alter_column('feeds', 'scrape_method', nullable=False)
    # Add scraper metadata fields to items (all nullable)
    op.add_column('items', sa.Column('scraped_at', sa.DateTime(), nullable=True))
    op.add_column('items', sa.Column('scrape_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('items', sa.Column('scrape_word_count', sa.Integer(), nullable=True))
    op.alter_column('research_runs', 'query_text',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('research_runs', 'result_content',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('research_runs', 'result_metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('research_runs', 'error_message',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_research_runs_created'), table_name='research_runs')
    op.drop_index(op.f('idx_research_runs_status'), table_name='research_runs')
    op.drop_index(op.f('idx_research_runs_template'), table_name='research_runs')
    op.create_index(op.f('ix_research_runs_created_at'), 'research_runs', ['created_at'], unique=False)
    op.create_index(op.f('ix_research_runs_status'), 'research_runs', ['status'], unique=False)
    op.drop_constraint(op.f('research_runs_template_id_fkey'), 'research_runs', type_='foreignkey')
    op.create_foreign_key(None, 'research_runs', 'research_templates', ['template_id'], ['id'])
    op.alter_column('research_templates', 'description',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('research_templates', 'function_parameters',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('research_templates', 'llm_prompt',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('research_templates', 'llm_temperature',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               nullable=True,
               existing_server_default=sa.text('0.7'))
    op.alter_column('research_templates', 'system_instruction',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_research_templates_active'), table_name='research_templates')
    op.drop_index(op.f('idx_research_templates_name'), table_name='research_templates')
    op.drop_index(op.f('idx_research_templates_schedule'), table_name='research_templates')
    op.create_index(op.f('ix_research_templates_is_active'), 'research_templates', ['is_active'], unique=False)
    op.create_index(op.f('ix_research_templates_name'), 'research_templates', ['name'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_research_templates_name'), table_name='research_templates')
    op.drop_index(op.f('ix_research_templates_is_active'), table_name='research_templates')
    op.create_index(op.f('idx_research_templates_schedule'), 'research_templates', ['schedule_enabled', 'cron_expression'], unique=False)
    op.create_index(op.f('idx_research_templates_name'), 'research_templates', ['name'], unique=True)
    op.create_index(op.f('idx_research_templates_active'), 'research_templates', ['is_active'], unique=False)
    op.alter_column('research_templates', 'system_instruction',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('research_templates', 'llm_temperature',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               nullable=False,
               existing_server_default=sa.text('0.7'))
    op.alter_column('research_templates', 'llm_prompt',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('research_templates', 'function_parameters',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('research_templates', 'description',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_constraint(None, 'research_runs', type_='foreignkey')
    op.create_foreign_key(op.f('research_runs_template_id_fkey'), 'research_runs', 'research_templates', ['template_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_research_runs_status'), table_name='research_runs')
    op.drop_index(op.f('ix_research_runs_created_at'), table_name='research_runs')
    op.create_index(op.f('idx_research_runs_template'), 'research_runs', ['template_id'], unique=False)
    op.create_index(op.f('idx_research_runs_status'), 'research_runs', ['status'], unique=False)
    op.create_index(op.f('idx_research_runs_created'), 'research_runs', ['created_at'], unique=False)
    op.alter_column('research_runs', 'error_message',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('research_runs', 'result_metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('research_runs', 'result_content',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('research_runs', 'query_text',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('items', 'scrape_word_count')
    op.drop_column('items', 'scrape_status')
    op.drop_column('items', 'scraped_at')
    op.drop_column('feeds', 'scrape_method')
    op.drop_column('feeds', 'scrape_full_content')
    op.create_table('research_queries',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('research_queries_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('query_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False),
    sa.Column('perplexity_executed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('perplexity_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('executed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='research_queries_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_research_queries_run_id'), 'research_queries', ['run_id'], unique=False)
    op.create_index(op.f('ix_research_queries_executed'), 'research_queries', ['perplexity_executed'], unique=False)
    op.create_table('research_article_links',
    sa.Column('research_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], name=op.f('research_article_links_item_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('research_run_id', 'item_id', name=op.f('research_article_links_pkey'))
    )
    op.create_index(op.f('ix_research_article_links_item_id'), 'research_article_links', ['item_id'], unique=False)
    op.create_table('research_results',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('query_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('result_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('structured_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['query_id'], ['research_queries.id'], name=op.f('research_results_query_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('research_results_pkey'))
    )
    op.create_index(op.f('ix_research_results_type'), 'research_results', ['result_type'], unique=False)
    op.create_index(op.f('ix_research_results_run_id'), 'research_results', ['run_id'], unique=False)
    # ### end Alembic commands ###
